委托可以理解成方法的另一种格式，是C#对方法调用进行的进一步的简化。
用我的理解的话，委托就是同类方法的集合。
1.委托的定义：
对于委托的定义，一般的委托在定义时要注意所定义的委托具有的返回值类型，参数数目，参数类型等，因为这个委托在后续是只能接收同类型的方法的。
        //委托的声明
        delegate void IntMethodInvoker(int x);
        delegate long TwoLong(long a, long b);
        delegate string GetAString();
2.委托的使用：
直接使用定义的委托变量指向同类型方法，接着直接调用委托变量也能得到与委托同样的效果的，委托调用过程中防空是必要的
            invoker = Program.Test;
            invoker(100);
而委托相较与方法的优点之一就是委托允许接收多个方法，+= -=对于委托都是可以的，即一个委托允许接收多个同类方法，这种一个委托可以包含多个方法的委托称之为多播委托
需要注意的是委托的调用过程中，如果中间任意方法出现错误，那么这个委托会立即停止
注：Action是系统自带的委托类型，见（4  ）
            //多播委托
            //多播委托，包含多个方法的委托，多播委托可按顺序调用多个方法，但是只能得到最后一个方法的返回值
            //多播委托可以理解为一个包含了多个同类函数的委托集合
            //中间一旦出异常则多播委托暂停
            Action action1 = Test5;
            action1 += Test6;
            action1();

            //多播委托转委托数组
            Delegate[] delegates2 = action1.GetInvocationList();
            foreach (Delegate d in delegates2)
            {
                //动态调用委托
                d.DynamicInvoke();
            }
3.委托数组：
委托数组和单个委托的区别不大，都是象征同类方法的集合，委托数组可以方便地指定要调用哪个方法而多播委托则需要使用动态调用才能相对便捷地调用指定方法
            DoubleOpDelegate[] operations = { MathOp.MultiplayByTwo, MathOp.Square };
            //委托数组的调用
            foreach (DoubleOpDelegate op in operations)
            {
                //一般委托数组遍历
                op(3);
                //委托做参数调用
                ProcessAndDisplayRes(op,4);
            }
4.系统自带委托：Action和Func
Action和Func都是C#系统自带的两个委托类型，基本可以满足客户的所有要求
两者的格式如下
Action格式：Action<参数类型1，参数类型2....> 委托变量名 = 方法;
Func格式：Func<参数类型1，参数类型2...，参数类型16，返回值类型> 委托变量名 = 方法;
从两者的格式不难看出，Action支持的是任意参数的无返回值方法，而Func支持的则是0-16个参数的带返回值方法。
            //Action无参委托
            //格式 Action<参数类别集> 委托变量名 = 方法；
            Action method = Test2;
            method();
            //Action含参委托
            Action<int> method2 = Test;
            method2(1);
            
            //Func无参委托
            //格式 
            //Func<参数类别集,返回值类型> 委托变量名 = 方法;
            Func<string> f = Test3;
            Console.WriteLine(f());
            //Func有参委托
            Func<int,string> f2 = Test4;
            Console.WriteLine(f2(1));
5.泛型委托
委托相对于一般方法的优势之二就是泛型委托，使用泛型委托能进一步使得方法的调用变得更灵活
将委托代入到方法中：
格式参考：        public static void Sort<T>(T[] data,Func<T,T,bool> compare)
                 {
                 }
调用：
            Employee[] employees = { new Employee("A", 1998),new Employee("B",2001),new Employee("C",1574),new Employee("D",2156) };
            //使用委托进行方法优化
            //优化后的冒泡排序允许对很多类型进行比较
            Sort<Employee>(employees, Employee.CompareSalary);
这说明委托是可以作为参数出现的，其中T代表泛型，即任意类型，不过泛型虽然类型上广了，但是使用的时候还是有很多限制性问题，这就需要我们自己想办法解决了（一般都是用委托解决）
6.匿名方法
匿名方法顾名思义没有名字的方法，在此是专门是指为委托服务的匿名方法
定义：
            Func<int, int, int> plus = delegate (int a, int b)
            {
                return a + b;
            };
            int res = plus(1, 2);
            Console.WriteLine(res);
从定义可知，匿名方法不需要指向已知的指定方法，可以直接在自己的范畴内实现一个匿名方法，并可以按照正常调用逻辑使用。
7.lambda表达式
如果说匿名方法是为了进一步优化委托的使用，那么lambda表达式就是对于委托简化的最大化了。
定义：
            Func<int, int, int> plus2 = (a, b) =>
            {
                return a + b;
            };
从定义可知，lambda表达式在匿名方法的基础上将关键字delegate和参数的类型省略了，因为这些都是不必要的内容，而当参数有且只有一个时（）是可以省略的，当{}内容单一时{}也是可以省略的。
8.委托X事件
在某些情境下我们需要限制委托无法被外界进行一些操作，这时候我们就需要对委托进行一定的限制了，在定义委托变量时如下：
        public event DownStairDelegate DownStairDelegate = null;
单纯这样写即可实现本委托支持+= -=的使用而不支持直接调用与=的功能，
当然，委托的知识远不止于此，还有很多其他的知识，想要深入学习的朋友可以以这个文章为基础，作者我对委托也没有很深的见解，想要了解更多的同学可以直接上官网查哦。

